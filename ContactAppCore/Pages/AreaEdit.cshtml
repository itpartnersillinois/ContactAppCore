@page
@model ContactAppCore.Pages.AreaEditModel
@{
}

<link rel="stylesheet" href="/css/quill.snow.css" />

<h1>Edit Unit Information</h1>

<form id="area" class="large">
    <h2>General Information</h2>
    <div><label for="title">Unit Name:</label><input id="title" name="title" class="long" /></div>
    <div>
        <label for="audience">Audience:</label><input id="audience" name="audience" class="long" />
        <div class="notes">For external units, this is displayed as "who would be interested in this unit". For internal units, this can be used as a generic second line of information.</div>
    </div>
    <div>
        <label for="areatype">Unit Type:</label><select id="areatype" name="areatype">
            <option value="0">Unknown</option>
            <option value="1">System</option>
            <option value="2">University</option>
            <option value="3">College</option>
            <option value="4">Research</option>
            <option value="9">Other</option>
        </select>
    </div>

    <h2>Contact Information</h2>
    <div>
        <label for="externalurl">External URL:</label><input id="externalurl" name="externalurl" class="long" />
        <div class="notes side"><a href="#" onclick="return checkLink('externalurl');">Test link for your external website.</a></div>
    </div>
    <div>
        <label for="internalurl">Internal URL:</label><input id="internalurl" name="internalurl" class="long" />
        <div class="notes side"><a href="#" onclick="return checkLink('internalurl');">Test link for your internal website (for faculty, staff, etc.).</a></div>
    </div>

    <h2>More Information</h2>
    <div>General Notes:<div id='notes' class='fulltext'></div></div>
    <div>
        <label for="searchterms">Search Term Information:</label><input id="searchterms" name="searchterms" class="long" />
        <div class="notes">This is information that is not displayed, but will show up if someone does a search for a phrase.</div>
    </div>
    <div>
        <label for="internalcode">Internal Code:</label><input id="internalcode" name="internalcode" class="long" />
        <div class="notes">This is used to query information in place of your ID.</div>
    </div>
    <div>
        <label for="internalnotes">Internal Notes:</label><input id="internalnotes" name="internalnotes" class="long" />
        <div class="notes">This is not displayed anywhere and is used for internal records.</div>
    </div>
    <div><label for="isactive">Is Active?:</label><input type="checkbox" id="isactive" name="isactive" /></div>
    <div>
        <label for="internalonly">Internal Only?:</label><input type="checkbox" id="internalonly" name="internalonly" />
        <div class="notes side">Display this information to TDX. Contact an administrator to edit this.</div>
    </div>
    <div>
        <label for="allowbeta">Allow Beta Access?:</label><input type="checkbox" id="allowbeta" name="allowbeta" />
        <div class="notes side">Allows access to development functions. Contact an administrator to edit this.</div>
    </div>
    <div>
        <label for="allowpeople">Allow to add People?:</label><input type="checkbox" id="allowpeople" name="allowpeople" />
        <div class="notes side">Allows access to link people to office information. Contact an administrator to edit this.</div>
    </div>
    <div>
        <label for="internalorder">Internal Order:</label>
        <select id="internalorder" name="internalorder">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3 (default)</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </select>
        <div class="notes side">This is used to order items in relation to other areas. Contact an administrator to edit this.</div>
    </div>

    <button class="il-button" onclick="return update();" aria-live="polite" id="updateButton">Update Area Information</button><span class="message" id="updateGeneralMessage">Area Information Updated</span>
</form>

<hr />
<h2>Links to pull information</h2>
<p><a href="#" id="tutorialurlid" target="_blank">Link to get information by ID</a></p>
<p><a href="#" id="tutorialurlcode" target="_blank">Link to get information by code</a></p>

<hr />

<h2>Area Administrator List</h2>
<p>These people will be able to update area information. They will also be able to add offices to this area.</p>
<ul id="names" class="listofitems">
</ul>

<form id="newpersonform">
    <label for="personname">Add a new area administrator: </label>
    <input type="text" id="personname" name="personname" />
    <button id="addperson" class="il-button narrow" onclick="return addPerson();">Add Person</button>
</form>

<a href="/office">Back to Offices</a>

@section Scripts
{
    <script src="~/js/quill.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        var quillInfo = new Quill('#notes', {
            modules: {
                toolbar: [
                    ['bold', 'italic', 'link', { 'list': 'ordered' }, { 'list': 'bullet' }, 'clean']
                ],
                keyboard: {
                    bindings: {
                        tab: {
                            key: 9,
                            handler: () => { document.getElementById('searchterms').focus(); },
                        },
                        'remove tab': {
                            key: 9,
                            shiftKey: true,
                            collapsed: true,
                            prefix: /\t$/,
                            handler: () => { },
                        }
                    }
                }
            },
            placeholder: 'Enter notes about your area ...',
            theme: 'snow'
        });


        document.addEventListener('DOMContentLoaded', function (event) {
            document.getElementsByClassName('ql-bold')[0].setAttribute('aria-label', 'apply bold');
            document.getElementsByClassName('ql-italic')[0].setAttribute('aria-label', 'apply italics');
            document.getElementsByClassName('ql-link')[0].setAttribute('aria-label', 'add or remove link');
            document.getElementsByClassName('ql-list')[0].setAttribute('aria-label', 'apply ordered link');
            document.getElementsByClassName('ql-list')[1].setAttribute('aria-label', 'apply bullet link');
            document.getElementsByClassName('ql-clean')[0].setAttribute('aria-label', 'clean markup');
            loadItems();
            loadPeople();
        });

        function loadItems() {
            const urlParams = new URLSearchParams(window.location.search);
            const id = urlParams.get('id');

            Promise.all([
                fetch('/Api/EditArea/' + id, {
                    method: 'GET',
                    headers: {
                        "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                    }
                }),
                fetch('/Api/Security/Admin', {
                    method: 'GET',
                    headers: {
                        "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                    }
                })
            ]).then(function (responses) {
                return Promise.all(responses.map(function (response) {
                    return response.json();
                }));
            }).then(fullData => {
                let data = fullData[0];
                let isAdmin = fullData[1];
                let rootUrl = 'https://' + window.location.host + '/';
                let tutorialUrlId = rootUrl + 'Api/Contact/Area/' + data.id;
                let tutorialUrlCode = rootUrl + 'Api/Contact/AreaCode/' + data.internalCode;
                document.getElementById('tutorialurlid').setAttribute('href', tutorialUrlId);
                if (data.internalCode != null && data.internalCode != '') {
                    document.getElementById('tutorialurlcode').setAttribute('href', tutorialUrlCode);
                }
                document.getElementById('title').value = data.title;
                document.getElementById('audience').value = data.audience;
                document.getElementById('areatype').value = data.areaType;
                document.getElementById('externalurl').value = data.externalUrl;
                document.getElementById('internalurl').value = data.internalUrl;

                if (data.notes != null) {
                    quillInfo.setContents(quillInfo.clipboard.convert(data.notes), 'silent');
                }
                document.getElementById('searchterms').value = data.searchTerms;
                document.getElementById('isactive').checked = data.isActive;
                document.getElementById('internalcode').value = data.internalCode;
                document.getElementById('internalnotes').value = data.internalNotes;
                document.getElementById('internalorder').value = data.internalOrder;
                document.getElementById('internalonly').checked = data.internalOnly;
                document.getElementById('allowbeta').checked = data.allowBeta;
                document.getElementById('allowpeople').checked = data.allowPeople;
                if (!isAdmin) {
                    document.getElementById('internalorder').disabled = true;
                    document.getElementById('internalonly').disabled = true;
                    document.getElementById('allowbeta').disabled = true;
                    document.getElementById('allowpeople').disabled = true;
                }
            });
        }

        function update() {
            const urlParams = new URLSearchParams(window.location.search);
            const id = urlParams.get('id');

            let object = {};
            let formElement = document.querySelector("form#area");
            let formData = new FormData(formElement);
            formData.forEach((value, key) => object[key] = value);
            object['id'] = id;
            object['notes'] = cleanQuill(quillInfo.root.innerHTML);
            var json = JSON.stringify(object);
            fetch('/Api/EditArea/Update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: json
            }).then(response => {
                document.getElementById('updateGeneralMessage').classList.add('show');
                document.getElementById('updateButton').innerHTML = 'Area Information Updated';
                setTimeout(function() { 
                    document.getElementById('updateGeneralMessage').classList.remove('show');
                    document.getElementById('updateButton').innerHTML = 'Update Area Information';
                }, 4000);
            });
            return false;
        }

        function cleanQuill(s) {
            if (s == '<br />' || s == '<br>' || s == '<p><br></p>') {
                return '';
            }
            return s;
        }

        function checkLink(inputbox) {
            var url = document.getElementById(inputbox).value
            if (url === '') {
                document.getElementById(inputbox).value = 'https://illinois.edu';
                url = 'https://illinois.edu';
            }
            window.open(url, '_blank');
            return false;
        }

        function addPerson() {
            const urlParams = new URLSearchParams(window.location.search);
            const id = urlParams.get('id');
            let formData = new FormData();
            formData.append('name', document.getElementById('personname').value);
            formData.append('areaid', id);
            fetch('/Api/EditPerson/AddToArea', {
                method: 'POST',
                body: formData
            }).then(res => loadPeople());
            return false;
        }

        function removePerson(i) {
            if (confirm('Are you sure you want to remove this person?')) {
                fetch('/Api/EditPerson/Delete/' + i, {
                    method: 'POST',
                }).then(res => loadPeople());
            }
            return false;
        }

        function loadPeople() {
            const urlParams = new URLSearchParams(window.location.search);
            const id = urlParams.get('id');

            document.getElementById('personname').value = '';
            fetch('/Api/Person/Area/' + id, {
                method: 'GET',
                headers: {
                    "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                }
            }).then(res => res.json()).then(data => {
                let list = document.getElementById('names');
                list.innerHTML = '';
                data.forEach(element => {
                    const li = document.createElement('li');
                    const anchor = document.createElement('a');
                    anchor.innerHTML = 'Remove person';
                    anchor.setAttribute('data-index', element.id);
                    anchor.setAttribute('href', '#');
                    anchor.setAttribute('onclick', 'return removePerson(' + element.id + ');');
                    anchor.setAttribute('class', 'il-button narrow');
                    li.innerHTML = element.title;
                    li.appendChild(anchor);
                    list.appendChild(li);
                });
                if (data.length == 0) {
                    const li = document.createElement('li');
                    li.innerHTML = 'N/A';
                    list.appendChild(li);
                }
            });
        }
    </script>
}