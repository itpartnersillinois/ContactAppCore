@page
@model ContactAppCore.Pages.JobEditModel
@{
}
<link rel="stylesheet" href="/css/quill.snow.css" />
<h1 id="pageTitle">Edit Job Profile</h1>

<form id="profile" class="large">
    <input id="id" name="id" type="hidden" value="0" />
    <input id="officeId" name="officeId" type="hidden" value="0" />
    <input id="personId" name="personId" type="hidden" value="0" />
    <div><label for="netid">Net ID:</label><input id="netid" name="netid" class="long" /><span id="netid-display"></span></div>
    <div><label for="title">Job Title:</label><input id="title" name="title" class="long" /></div>
    <div>
        <label for="category">Category:</label><select id="category" name="category">
            <option value="">Other</option>
            <option value="Core Faculty">Core Faculty</option>
            <option value="Faculty">Faculty</option>
            <option value="Grad Students">Graduate Student</option>
            <option value="Staff">Staff</option>
            <option value="Emeritus">Emeritus</option>
            <option value="Affiliate">Affiliate</option>
        </select>
    </div>
    <div>
        <label for="display">Display:</label><select id="display" name="display">
            <option value="Staff Directory Only">Directory Only</option>
            <option value="Faculty Finder">Faculty Finder</option>
        </select>
    </div>
    <div>
        <label for="internalorder">Internal Order:</label><select id="internalorder" name="internalorder">
            <option value="3">Medium</option>
            <option value="1">High</option>
            <option value="5">Low</option>
        </select>
    </div>
    <div>Job-Specific Biography:<div id='biography' class='fulltext'></div></div>
</form>

<p><button class="il-button" id="updateGeneral" onclick="return update();">Update Job Profile Information</button> <span class="message" id="updateGeneralMessage">Job Profile Updated</span></p>

<div id="profile-addition" style="display: none;">
    <div id='job-profile-group'>
    <h2>Job Profiles</h2>
    <div>
        <label for="jobs">Job Profiles:</label>
        <select id="jobs" name="jobs"></select>
        <button class="il-button narrow" onclick="return updateJob();">Make selected job primary</button> <span class="message" id="updateJobMessage">Updated</span>
    </div>
    </div>

    <h2>Picture</h2>
    <p>Note that this will affect all instances of the employee's picture</p>
    <div class="uploader">
        <img id="image-photo" />
        <input type="file" id="picture-upload" name="picture-upload">
        <div>
            <button class="il-button narrow" onclick="return picture();">Upload Photo</button>
            <button class="il-button narrow" onclick="return deletepicture();">Delete Photo</button>
            <div id="picture-error" class="error"></div>
        </div>
    </div>

    <h2>CV</h2>
    <p>Note that this will affect all instances of the employee's CV</p>
    <div class="uploader">
        <a id="link-cv">Link to CV</a>
        <input type="file" id="cv-upload" name="cv-upload">
        <div>
            <button class="il-button narrow" onclick="return cv();">Upload CV</button>
            <button class="il-button narrow" onclick="return deletecv();">Delete CV</button>
            <div id="cv-error" class="error"></div>
        </div>
    </div>
</div>
<p><a href="" id="back">Back to Job Profile List</a></p>

@section Scripts
{
    <script src="~/js/quill.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        var quillInfo = new Quill('#biography', {
            modules: {
                toolbar: [
                    ['bold', 'italic', 'link', { 'list': 'ordered' }, { 'list': 'bullet' }, 'clean']
                ],
                keyboard: {
                    bindings: {
                        tab: {
                            key: 9,
                            handler: () => { document.getElementById('category').focus(); },
                        },
                        'remove tab': {
                            key: 9,
                            shiftKey: true,
                            collapsed: true,
                            prefix: /\t$/,
                            handler: () => { },
                        }
                    }
                }
            },
            placeholder: 'Enter the job-specific biography ...',
            theme: 'snow'
        });

        function loadInformation() {
            document.getElementsByTagName('main')[0].style.visibility = 'hidden';
            const urlParams = new URLSearchParams(window.location.search);
            const id = urlParams.get('id');
            const officeId = urlParams.get('officeId');
            document.getElementById('back').setAttribute('href', '/JobList?id=' + officeId);
            if (id == '0') {
                document.getElementById('officeId').value = officeId;
                document.getElementById('netid').disabled = false;
                document.getElementById('pageTitle').innerHTML = 'Add Job Profile';
                let updateButton = document.getElementById('updateGeneral');
                updateButton.innerHTML = 'Add Job Profile Information';
                updateButton.setAttribute('onclick', 'return add();');
                let updateMessage = document.getElementById('updateGeneralMessage');
                updateMessage.innerHTML = 'Added';
                document.getElementsByTagName('main')[0].style.visibility = '';
            } else {
                fetch('/Api/Security/AllowProfileEdit/' + officeId, {
                    method: 'GET',
                    headers: {
                        "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                    }
                }).then(res => res.json()).then(data => { if (data) { document.getElementById('profile-addition').style.display = ''; } else { document.getElementById('profile-addition').style.display = 'none'; } });

                fetch('/Api/Job/' + id, {
                    method: 'GET',
                    headers: {
                        "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                    }
                }).then(res => res.json()).then(data => {
                    document.getElementById('netid').disabled = true;
                    document.getElementById('netid').style.display = 'none';
                    document.getElementById('netid-display').innerHTML = data.employeeNetId;
                    document.getElementById('personId').value = data.employeeProfileId
                    document.getElementById('id').value = data.id;
                    document.getElementById('title').value = data.title;
                    document.getElementById('internalorder').value = data.internalOrder;
                    if (data.biography != null) {
                        quillInfo.setContents(quillInfo.clipboard.convert(data.biography), 'silent');
                    }
                    data.tags.forEach(t => {
                        if (t.title == 'Staff Directory Only' || t.title == 'Faculty Finder') {
                            document.getElementById('display').value = t.title;
                        } else {
                            document.getElementById('category').value = t.title;
                        }
                    });

                    fetch('/Api/Employee/ById/' + data.employeeProfileId, {
                        method: 'GET',
                        headers: {
                            "Content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                        }
                    }).then(res => res.json()).then(person => {
                        if (person.photoUrl != null && person.photoUrl != '') {
                            document.getElementById('image-photo').setAttribute('src', person.photoUrl + '?id=' + new Date().getTime());
                            document.getElementById('image-photo').style.display = '';
                        } else {
                            document.getElementById('image-photo').style.display = 'none';
                        }
                        if (person.cvUrl != null && person.cvUrl != '') {
                            document.getElementById('link-cv').setAttribute('href', person.cvUrl);
                            document.getElementById('link-cv').style.display = '';
                        } else {
                            document.getElementById('link-cv').style.display = 'none';
                        }
                        const jobs = document.getElementById('jobs');
                        jobs.innerHTML = '';
                        if (person.jobs != null) {
                            person.jobs.forEach(j => {
                                let option = document.createElement('option');
                                option.value = j.id;
                                option.innerHTML = j.title + ' / ' + j.office.title;
                                if (j.id === person.primaryProfile) {
                                    option.setAttribute('selected', 'selected');
                                }
                                jobs.append(option);
                            });
                            if (person.jobs.length <= 1) {
                                document.getElementById('job-profile-group').style.display = 'none';
                            }
                        }
                        document.getElementsByTagName('main')[0].style.visibility = '';
                    });
                });
            }
        }

        function update() {
            let object = {};
            object['id'] = document.getElementById('id').value;
            object['biography'] = cleanQuill(quillInfo.root.innerHTML);
            object['title'] = document.getElementById('title').value;
            document.querySelectorAll('#profile select').forEach(p => object[p.name] = p.value);
            var json = JSON.stringify(object);
            fetch('/Api/EditJob/Update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: json
            }).then(response => {
                document.getElementById('updateGeneralMessage').classList.add('show');
                setTimeout(function() { 
                    document.getElementById('updateGeneralMessage').classList.remove('show');
                }, 4000);
            });
            return false;
        }

        function updateJob() {
            let object = {};
            object['id'] = document.getElementById('personId').value;
            object['jobid'] = document.getElementById('jobs').value;
            var json = JSON.stringify(object);
            fetch('/Api/EditEmployee/UpdatePrimaryJob', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: json
            }).then(respoinse => {
                document.getElementById('updateJobMessage').classList.add('show');
                setTimeout(function() { 
                    document.getElementById('updateJobMessage').classList.remove('show');
                }, 4000);
            });
            return false;
        }

        function add() {
            let object = {};
            object['officeId'] = document.getElementById('officeId').value;
            object['biography'] = cleanQuill(quillInfo.root.innerHTML);
            object['netid'] = document.getElementById('netid').value;
            object['title'] = document.getElementById('title').value;
            document.querySelectorAll('#profile select').forEach(p => object[p.name] = p.value);
            var json = JSON.stringify(object);
            fetch('/Api/EditJob/Add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: json
            });
            return false;
        }

        function picture() {
            var fd = new FormData();
            var file_data = document.getElementById('picture-upload').files[0];
            fd.append('file', file_data);
            fd.append('id', document.getElementById('personId').value);
            fetch('/Api/EditEmployee/Picture', {
                method: 'POST',
                body: fd
            }).then(function (response) {
                return response.text().then(function (text) {
                    if (text.startsWith("Error")) {
                        document.getElementById('picture-error').innerHTML = text;
                        document.getElementById('image-photo').style.display = 'none';
                    } else {
                        document.getElementById('image-photo').setAttribute('src', text + '?id=' + new Date().getTime());
                        document.getElementById('image-photo').style.display = '';
                        document.getElementById('picture-error').innerHTML = '';
                    }
                });
            });
        }

        function deletepicture() {
            var fd = new FormData();
            fd.append('id', document.getElementById('personId').value);
            fetch('/Api/EditEmployee/DeletePicture', {
                method: 'POST',
                body: fd
            }).then(function (response) {
                return response.text().then(function (text) {
                    if (text.startsWith("Error")) {
                        document.getElementById('picture-error').innerHTML = text;
                    } else {
                        document.getElementById('image-photo').style.display = 'none';
                        document.getElementById('picture-error').innerHTML = '';
                    }
                });
            });
        }

        function cv() {
            var fd = new FormData();
            var file_data = document.getElementById('cv-upload').files[0];
            fd.append('file', file_data);
            fd.append('id', document.getElementById('personId').value);
            fetch('/Api/EditEmployee/CV', {
                method: 'POST',
                body: fd
            }).then(function (response) {
                return response.text().then(function (text) {
                    if (text.startsWith("Error")) {
                        document.getElementById('cv-error').innerHTML = text;
                        document.getElementById('link-cv').style.display = 'none';
                    } else {
                        document.getElementById('link-cv').setAttribute('src', text + '?id=' + new Date().getTime());
                        document.getElementById('link-cv').style.display = '';
                        document.getElementById('cv-error').innerHTML = '';
                    }
                });
            });
        }

        function deletecv() {
            var fd = new FormData();
            fd.append('id', document.getElementById('personId').value);
            fetch('/Api/EditEmployee/DeleteCV', {
                method: 'POST',
                body: fd
            }).then(function (response) {
                return response.text().then(function (text) {
                    if (text.startsWith("Error")) {
                        document.getElementById('cv-error').innerHTML = text;
                    } else {
                        document.getElementById('link-cv').style.display = 'none';
                        document.getElementById('cv-error').innerHTML = '';
                    }
                });
            });
        }

        function cleanQuill(s) {
            if (s == '<br />' || s == '<br>' || s == '<p><br></p>') {
                return '';
            }
            return s;
        }

        document.addEventListener('DOMContentLoaded', function (event) {
            document.getElementsByClassName('ql-bold')[0].setAttribute('aria-label', 'apply bold');
            document.getElementsByClassName('ql-italic')[0].setAttribute('aria-label', 'apply italics');
            document.getElementsByClassName('ql-link')[0].setAttribute('aria-label', 'add or remove link');
            document.getElementsByClassName('ql-list')[0].setAttribute('aria-label', 'apply ordered link');
            document.getElementsByClassName('ql-list')[1].setAttribute('aria-label', 'apply bullet link');
            document.getElementsByClassName('ql-clean')[0].setAttribute('aria-label', 'clean markup');
            loadInformation();
        });
    </script>
}